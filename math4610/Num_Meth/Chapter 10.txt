## Chapter 10

# Linear fit with lm()

x = 0:10
set.seed(333)
y = 3*x + 4 + rnorm(n = length(x), mean = 0, sd = 0.3)
yfit = lm(y~x)
yfit
par(mfrow=c(1,2)
par(mar=c(4,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3) 
plot(x,y)
abline(yfit)
plot(x,residuals(yfit))
abline(0,0)

#######################

# Polynomial fit with lm()

set.seed(66)
x=0:20
y=1+x/10+x^2/100+rnorm(length(x),0,.5)
y2fit = lm(y ~ 1 + x + I(x^2))
# Or equivalently y2fit = lm(y ~ poly(x,2))
summary(y2fit)
par(mar=c(4,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3) 
plot(x,y)
points(x,predict(y2fit),type="l")

#######################

# Lanczos3 fit

lanczos3 = read.table(file="~/Desktop/NIST/Lanczos3.txt", header=T)
x = lanczos3$x; y = lanczos3$y
nls_lan3 = nls(y~b1*exp(-b2*x)+b3*exp(-b4*x)+b5*exp(-
b6*x),start=list(b1=1.2,b2=0.3,b3=5.6,b4=5.5,b5=6.5,b6=7.6))
# Now with modified control parameters
nls_lan3 = nls(y~b1*exp(-b2*x)+b3*exp(-b4*x)+b5*exp(-
b6*x),start=list(b1=1.2,b2=0.3,b3=5.6,b4=5.5,b5=6.5,b6=7.6),
control=list(tol=1e-4, minFactor=1e-6))
summary(nls_lan3)
# Plot data, fit, and residuals
par(mfrow=c(1,2))
plot(x,y,pch=16,cex=0.5)
lines(x,predict(nls_lan3))
plot(x,residuals(nls_lan3))
abline(0,0)

########################

# Pade approximation

require(pracma)
P = pade(c(-1/4,1/3,-1/2,1,0),d1=2,d2=2)
r1 = P$r1; r2 = P$r2
origfn = function(x) log(1+x)
taylorfn = function(x) x-x^2/2+x^3/3-x^4/4
padefn = function(x) polyval(r1,x)/polyval(r2,x)
curve(log(1+x),0,2)
curve(taylorfn, add=T,lty=2)
x=seq(0,2,.5)
points(x,padefn(x),pch=16)

########################

# Direct summation of Riemann zeta function
x = 1:60
y = 1/x^2
csy=cumsum(y)
par(mar=c(4,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3) 
plot(x,csy,type="l", ylim=c(1,1.8))
abline(h=pi^2/6, lty=3)
# Shanks approximation
S = function(w,n) {
  lam = (w[n+1]-w[n])/(w[n]-w[n-1])
  return(w[n+1]+lam/(1-lam)*(w[n+1]-w[n]))
  }
# Use terms (1,2,3) to get S(csy,2), ... 
# (5,6,7) to get S(csy,6) 
S1 = c(S(csy,2),S(csy,3),S(csy,4),S(csy,5),S(csy,6))
S1
# Now use the previous five values to get three new values
S2 = c(S(S1,2),S(S1,3),S(S1,4))
S2
# Use those three values to get one new value
S3 = S(S2,2);
S3

######################

### Interpolation

# Known values
tC = c(0,5,10,15)
visc = c(3.774, 3.135, 2.642, 2.255)
par(mar=c(4,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3) 
plot(tC,visc, type="o")
# Desired temperatures
tExp = c(4,7,12)
# Linear approximation
approx(tC,visc,tExp)
# Linear approximation using approxfun
apf = approxfun(tC,visc)
apf(tExp)

# Lagrangian polynomial interpolation
require(PolynomF)
polyf = poly.calc(tC, visc)
polyf(tExp)

# Barycentric Lagrange interpolation
require(pracma)
barylag(tC,visc,tExp)

# Spline interpolation
spline(tC,visc,xout=tExp)
spf = splinefun(tC, visc)
spf(tExp)

########################

### Dealing with non-monotonic behavior

options(digits=4)
x=c(0,.5,1,2,3,4)
y=c(0,.93,1,1.1,1.15,1.2)
require(PolynomF)
polyfit = poly.calc(x,y)
polyfit
par(mar=c(4,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3) 
plot(x,y)
curve(polyfit,add=T,lty=3)
splinefit=splinefun(x,y)
curve(splinefit,add=T,lty=2)
splinefit.mono = splinefun(x,y,method="mono")
curve(splinefit.mono,add=T,lty=1)
legend("bottomright",legend=c("polynom","spline","spline.mono"),lty=c
(3:1),bty="n")

######################

### Rational interpolation

require(pracma)
ratinterp(tC,visc,tExp)
ratinterp(tC,visc,20)
polyf(20)
spf(20)

######################

### Analysis of a sine wave

# Parameters
N = 50; freq = 1/5; A = 1; phi = pi/6; tau = 1
par(mfrow=c(1,2)) # To display various features side-by-side
par(mar=c(4,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3) 
# Draw the smooth underlying sine wave
curve(sin(2*pi*freq*x + phi),0,N-1, xlab="time", 
main="Sampled Sine Function")
# Plot the points at which sampling will occur
j=0:(N-1)
y = sin(2*pi*freq*j*tau + phi)
points(j,y,pch=16,cex=0.7)
# Calculate the real and imaginary parts of the fft
ry = Re(fft(y)); iy = Im(fft(y))
# Set the infinitesimal components to zero
zry = zapsmall(ry)
ziy = zapsmall(iy)
# Plot the real part(s)
plot(j/(tau*N),zry,type="h",ylim=c(min(c(zry,ziy)),
max(c(zry,ziy))),xlab = "freq",
ylab ="Re(y),Im(y)", main="Fourier Components")
# Add the imaginary part(s)
points(j/(tau*N),ziy,type="h",lty=2)
legend("top",legend=c("Re","Im"),lty=1:2, bty="n")

######################

### Power spectrum

# Set up for plotting two graphs with combined caption
par(oma=c(0,0,2,0))
par(mar=c(3,3,2,1))
par(mfrow=c(1,2))
# Calculate the power spectrum
sp = spectrum(y, xlab="frequency", ylab="power",main="Logarithmic")
grid() # To more easily read off the coordinates of the peak(s)
# Place the combined caption
mtext("Power Spectrum of Sine Function", side=3,line=2, adj=-2)
# Plot the linearized power spectrum
plot(sp$freq,sp$spec,type="h", main="Linear")

#######################

### fft and power spectrum of two sine functions

par(mfrow=c(1,2))
par(mar=c(4,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3) 
N = 50; tau = 1
f1 = 1/5; A1 = 1; f2 =1/3; A2 = 2
curve(A1*sin(2*pi*f1*x) + A2*sin(2*pi*f2*x),0,N-1, 
xlab="time", main="Two Sine Functions")

j=0:(N-1)
y = A1*sin(2*pi*f1*j*tau) + A2*sin(2*pi*f2*j*tau)

ry = Re(fft(y)); iy = Im(fft(y))
zry = zapsmall(ry)
ziy = zapsmall(iy)

plot(j/(tau*N),zry,type="h",ylim=c(min(c(zry,ziy)),
max(c(zry,ziy))),xlab = "freq",
  ylab ="Re(y),Im(y)", main="Fourier Components")
points(j/(tau*N),ziy,type="h",lty=2)

par(mfrow = c(1,1))
sp = spectrum(y, xlab="frequency", ylab="power",main="Power Spectrum 2 Sines")
grid()

#####################

### 2 sine waves with random noise and sloping baseline

par(mfrow=c(1,2))
par(mar=c(4,4,4,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3) 
set.seed(123)
N = 50; tau = 1
f1 = 1/5; A1 = 1; f2 =1/3; A2 = 2 
j=0:(N-1)
y = A1*sin(2*pi*f1*j*tau) + A2*sin(2*pi*f2*j*tau) 
ybase = j/10 # Add a linear sloping baseline
yrand = rnorm(N) # and some random noise
y = y + ybase + yrand # Combine
plot(j,y,type="l")
sp = spectrum(y); grid() 

#####################

### Inverse fft of previous function

par(mfrow=c(1,1))
par(mar=c(4,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3) 
yfft = fft(y)
yifft = fft(yfft,inverse=TRUE)
plot(j,Re(yifft), type="l")

#####################

spf = sp$freq
sps = sp$spec
par(mar=c(4,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3) 
plot(spf,sps,type="l")
require(pracma)
findpeaks(sps,minpeakheight=5)
spf[c(10,17)]

######################

### Butterworth filter

require(signal)
bf = butter(3, 0.1)  # 10 Hz low-pass filter
t = seq(0, 1, len = 100)  # 1 second sample

#####################

### Butterworth filter on 2.3 Hz sinusoid + noise
require(signal)
x = sin(2*pi*t*2.3) + 0.25*rnorm(length(t))
y = filtfilt(bf, x)
z = filter(bf, x) # apply filter
par(mar=c(4,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3) 
plot(t, x,type="l", lty=3, lwd = 1.5)
lines(t, y, lty=1, lwd=1.5)
lines(t, z, lty=2, lwd = 1.5)
legend("bottomleft", legend = c("data", "filtfilt", "filter"), 
lty=c(3,1,2), lwd=rep(1.5,3), bty = "n")

######################

### Savitzky-Golay filter

require(signal)
y = sgolayfilt(x)
par(mar=c(4,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3)
plot(t,x,type="l",lty=3)
lines(t, y)
legend("bottomleft", legend = c("data", "sgolayfilt"), 
lty=c(3,1), bty = "n")

######################

### fft filter

require(signal)
z = fftfilt(rep(1, 10)/10, x) # apply 10-point averaging filter
par(mar=c(4,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3)
plot(t, x, type = "l", lty=3)
lines(t, z)
legend("bottomleft", legend = c("data", "fftfilt"), 
lty=c(3,1), bty = "n")

######################

### Principal component analysis

iris1 = iris[, -5] # Remove the non-numeric species column.
iris1_pca = prcomp(iris1, scale = T)
iris1_pca
summary(iris1_pca)
par(mfrow=c(1,2))
par(mar=c(4,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3) 
plot(iris1_pca)
biplot(iris1_pca, col = c("gray", "black"))
par(mfrow=c(1,1))

#######################

### hclust

iris1_dist = dist(iris1) # Uses default method
par(mar=c(4,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3) 
plot(hclust(iris1_dist))

#######################

### diana clustering

library(cluster)
hierclust = diana(iris1)
par(mar=c(4,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3) 
plot(hierclust,which.plots=2, main="DIANA for iris")

#######################


### k-means clustering

iris1_kmeans3 = kmeans(iris1, centers = 3)
table(iris1_kmeans3$cluster)
ccent = function(cl) {
  f = function(i) colMeans(iris1[cl==i,]) 
  x = sapply(sort(unique(cl)), f)
  colnames(x) = sort(unique(cl)) 
  return(x)
  }
ccent(iris1_kmeans3$cluster)

#######################

### k-medioids clustering (pam)

require(cluster)
pam(iris1, k=3)
par(mar=c(3.2,4,1.5,1.5),mex=.8,mgp=c(2,.5,0),tcl=0.3) 
plot(pam(iris1, k=3),which.plots=1,labels=3,main="PAM for iris")

#######################

